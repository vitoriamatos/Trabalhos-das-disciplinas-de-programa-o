package ed1.pacote1;

class Node<T extends Comparable<T>> {

    private T info;
    private Node<T> left;
    private Node<T> right;

    Node(T value) {
        this.info = value;
    }

    void setInfo(T value) {
        this.info = value;
    }

    T getInfo() {
        return info;
    }

    Node<T> getLeft() {
        return left;
    }

    void setLeft(Node<T> left) {
        this.left = left;
    }

    Node<T> getRight() {
        return right;
    }

    void setRight(Node<T> right) {
        this.right = right;
    }

    //METODOS USADOS PELA CLASSE TREE
    T findNode(T value) {
        if (value.compareTo(this.info) == 0) {
            return this.info;
        } else if (value.compareTo(this.info) < 0) {
            if (this.left == null) {
                return null;
            } else {
                return this.left.findNode(value);
            }
        } else {
            if (this.right == null) {
                return null;
            } else {
                return this.right.findNode(value);
            }
        }
    }

    void insertNode(T value) {
        if (value.compareTo(this.getInfo()) == 0) {
            System.out.println("Valor repetido.");
        } else if (value.compareTo(this.getInfo()) < 0) {
            if (this.left == null) {
                this.left = new Node(value);
            } else {
                this.left.insertNode(value);
            }
        } else {
            if (this.right == null) {
                this.right = new Node(value);
            } else {//
                this.right.insertNode(value);
            }
        }
    }

    int compareTo(Node<T> value) {
        return this.info.compareTo(value.info);

    }
}